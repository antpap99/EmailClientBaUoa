/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.emailclient;

import java.io.IOException;
import java.text.SimpleDateFormat;
import javax.mail.*;
import javax.mail.internet.*;
import java.util.Properties;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.ListSelectionModel; 
import java.util.ArrayList;
import javax.mail.Address;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.*;



/**
 *
 * @author antpap
 */
public class getmail extends javax.swing.JFrame {
    
    public ArrayList<Message> messageList;
    EmailClient emailclient = new  EmailClient();
    public void getAttributes (){
        try{
            System.out.println(emailclient.mail);
            for (String i : emailclient.from)
                System.out.println(i);
            
        } catch (Exception e){
            e.printStackTrace();
        }
        
    }
    //messageList = login1.getMessages();
    //Subject = login1.getSubjects;
    //Subject.addAll(login1.getSubjects);
    /**
     * Creates new form getmail
     */
    public getmail() {
        initComponents();
        addDataToTable();
    }
    
    private void addDataToTable() {
        DefaultTableModel model = (DefaultTableModel) emailsTable.getModel();
        model.setRowCount(0);
        model.setRowCount(emailclient.subject.size());
        emailsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        emailsTable.setRowSelectionAllowed(false);
        emailsTable.setCellSelectionEnabled(true );
        
        
        
        for (int i = 0; i < emailclient.from.size(); i++) {
            model.setValueAt(emailclient.from.get(i), i, 0); // Adds data to the from column
        }
        for (int i = 0; i < emailclient.subject.size(); i++) {
            model.setValueAt(emailclient.subject.get(i), i, 1); // Adds data to the Name column
        }
        for (int i = 0; i < emailclient.date.size(); i++) {
            model.setValueAt(emailclient.date.get(i), i, 2); // Adds data to the Age column
        }
        for (int i = 0; i < emailclient.text.size(); i++) {
            model.setValueAt(emailclient.text.get(i), i, 3); // Adds data to the Country column
        }
        
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        scrollPane2 = new javax.swing.JScrollPane();
        emailsText = new javax.swing.JTextArea();
        scroll1 = new javax.swing.JScrollPane();
        emailsTable = new javax.swing.JTable();
        scroll2 = new javax.swing.JScrollPane();
        textScroll = new javax.swing.JTextPane();
        btnCompose = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnReply = new javax.swing.JButton();
        btnForward = new javax.swing.JButton();
        comboboxSearch = new javax.swing.JComboBox<>();
        TextSearchMails = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        folderList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        splitPane.setAlignmentX(0.5F);
        splitPane.setAlignmentY(0.5F);
        splitPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        emailsText.setColumns(20);
        emailsText.setRows(5);
        scrollPane2.setViewportView(emailsText);

        splitPane.setRightComponent(scrollPane2);

        emailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "From", "Subject", "Date", "Message", "Favorite"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        emailsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        emailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emailsTableMouseClicked(evt);
            }
        });
        scroll1.setViewportView(emailsTable);

        splitPane.setLeftComponent(scroll1);

        scroll2.setViewportView(textScroll);

        splitPane.setRightComponent(scroll2);

        btnCompose.setText("Compose");
        btnCompose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComposeActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh Inbox");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnReply.setText("Reply");

        btnForward.setText("Forward");

        comboboxSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboboxSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxSearchActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");

        folderList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Recieved", "Favorite", "Sent", "Draft", "Spam" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(folderList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCompose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(603, 603, 603)
                            .addComponent(btnReply, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnForward, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(splitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(comboboxSearch, 0, 151, Short.MAX_VALUE)
                        .addComponent(TextSearchMails))
                    .addComponent(btnSearch))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReply)
                    .addComponent(btnForward))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(splitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboboxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TextSearchMails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCompose)
                    .addComponent(btnRefresh))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboboxSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxSearchActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_comboboxSearchActionPerformed

    private void btnComposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComposeActionPerformed
        // TODO add your handling code here:
        openSendMail();
    }//GEN-LAST:event_btnComposeActionPerformed

    private void emailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emailsTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = emailsTable.getSelectedRow();
        if (selectedRow >= 0) {
            String emailText = emailclient.text.get(selectedRow);
            textScroll.setText(emailText);
        } 
        if (evt.getClickCount() == 2){
            int clickedColumn = emailsTable.columnAtPoint(evt.getPoint());
            if ( (selectedRow >= 0) && (clickedColumn == 0) ) {
                String emailText = emailclient.from.get(selectedRow);
                textScroll.setText(emailText);
            }
            else if( (selectedRow >= 0) && (clickedColumn == 1) ){
                String emailText = emailclient.subject.get(selectedRow);
                textScroll.setText(emailText);
            }
            else if ( (selectedRow >= 0) && (clickedColumn == 2) ){
                String emailText = emailclient.date.get(selectedRow);
                textScroll.setText(emailText);
            }
        }
    }//GEN-LAST:event_emailsTableMouseClicked

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        emailclient.subject.clear();
        emailclient.from.clear();
        emailclient.text.clear();
        emailclient.date.clear();
        Properties props = new Properties();
                
                props.put("mail.store.protocol", "imaps");
                props.put("mail.imaps.host", emailclient.host);
                props.put("mail.imaps.port", "993");
                props.put("mail.imaps.ssl.enable", "true");
                
                try {
                Session emailSession = Session.getInstance(props);
                Store store = emailSession.getStore("imaps");
                emailSession.setDebug(true);
                // Connect to the IMAP server
                store.connect(emailclient.host, emailclient.username, emailclient.password);

                Folder emailFolder = store.getFolder("INBOX");
                emailFolder.open(Folder.READ_ONLY);

                Message[] messages = emailFolder.getMessages();
                messageList = new ArrayList<>(); // Create a new ArrayList
                Collections.addAll(messageList, messages); // Add all messages to the ArrayList
                System.out.println("Number of emails: " + messages.length);
                System.out.println("List of emails: " + messageList);
                ArrayList <String> subjects = new ArrayList<>();
                // Example: Print out subject of each email
                for (Message message : messages) {
                    String Subject = message.getSubject();
                    Date date = message.getSentDate();
                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String datestring = formatter.format(date);
                    emailclient.subject.add(0, Subject);//πρωτο subject ειναι ιδιοηττα του αντικειμενου , δευτερο ειναι τοποικη μεταβλητη
                    emailclient.date.add(0, datestring); // το 0 υποδηλωνει εισαγωγη στην κορυφη της ArrayList
                    Address [] from = message.getFrom();
                    for(Address address : from){
                        if (address instanceof InternetAddress){
                            InternetAddress internetFrom = (InternetAddress) address;
                            String FROM1 = internetFrom.getAddress();
                            String FROM2 = internetFrom.getPersonal();
                            String FROM = FROM2 + " , " + FROM1;
                            emailclient.from.add(0, FROM); // το 0 υποδηλωνει εισαγωγη στην κορυφη της ArrayList
                        }
                        if(message instanceof MimeMessage){
                            MimeMessage mimeMessage = (MimeMessage) message;
                            try{
                                Object content = mimeMessage.getContent();
                                if(content instanceof String){
                                    String textContent = (String) content;
                                } else if (content instanceof Multipart){
                                    Multipart multipart = (Multipart) content;
                                    for(int i = 0; i < multipart.getCount(); i++){
                                        BodyPart bodyPart = multipart.getBodyPart(i);
                                        if(bodyPart.isMimeType("text/plain")){
                                            String plainText = (String) bodyPart.getContent();
                                            emailclient.text.add(0, plainText);
                                        }
                                    }
                                }
                            }catch (IOException | MessagingException e) {
                                    // Χειρισμός σφάλματος
                            }       
                        }
                    }
                }
                emailFolder.close(false);
                    store.close();
                } catch (NoSuchProviderException e) {
                            e.printStackTrace();
                            
                } catch (MessagingException e) {
                            e.printStackTrace();
                            
                }
        addDataToTable();
        emailsTable.revalidate();
        emailsTable.repaint();
    }//GEN-LAST:event_btnRefreshActionPerformed
    private void openSendMail() {
        SendMail sendmail = new SendMail();
        sendmail.setVisible(true);
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(getmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(getmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(getmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(getmail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new getmail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TextSearchMails;
    private javax.swing.JButton btnCompose;
    private javax.swing.JButton btnForward;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnReply;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboboxSearch;
    private javax.swing.JTable emailsTable;
    private javax.swing.JTextArea emailsText;
    private javax.swing.JList<String> folderList;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane scroll1;
    private javax.swing.JScrollPane scroll2;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTextPane textScroll;
    // End of variables declaration//GEN-END:variables
}
